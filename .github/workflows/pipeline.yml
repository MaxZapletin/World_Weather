name: Build and Push Docker Image to ECR

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - main

jobs:
  build-and-test-develop:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials from secrets
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker image for testing
        env:
            ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
            ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
            COMMIT_SHA: ${{ github.sha }}
            BRANCH_NAME: ${{ github.ref_name }}
            FILE: ${{ 'app/Dockerfile' }}
        run: |
            IMAGE_TAG=develop
            BRANCH_TAG=${BRANCH_NAME}-${COMMIT_SHA:0:7}
            
            docker build --file $FILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG
            docker run -d -p 5000:5000 --name weather_app $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                docker ps
                sleep 15
                docker ps

      - name: Check application logs
        run: |
          echo "Application Logs:"
          docker logs weather_app

      - name: Check application files
        run: |
          echo "Application Files:"
          docker exec weather_app ls -R /app

      - name: Check Python packages
        run: |
          echo "Installed Python Packages:"
          docker exec weather_app pip list

      - name: Check environment variables
        run: |
          echo "Environment Variables:"
          docker exec weather_app env

      - name: Test application
        run: |
          curl -vvv --fail localhost:5000 || true
          docker logs weather_app

      - name: Check for Python errors
        run: |
          echo "Checking for Python errors:"
          docker logs weather_app 2>&1 | grep -i "error" || true
          docker logs weather_app 2>&1 | grep -i "exception" || true

      - name: Display app.py contents
        run: |
          echo "Contents of app.py:"
          docker exec weather_app cat /app/app.py
      #       docker run -d -p 5000:5000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #       docker ps
      #       sleep 15
      #       docker ps
      #       CONTAINER_ID=$(docker ps -q --filter ancestor=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)
      #       docker logs $CONTAINER_ID
      #       curl -vvv --fail localhost:5000 
      #       CONTAINER_ID=$(docker ps -q --filter ancestor=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)
      #       docker logs $CONTAINER_ID

      - name: Push Docker image to ECR
        if: success()
        run: |
          IMAGE_TAG=develop
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  build-and-deploy-main:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials from secrets
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          COMMIT_SHA: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
          FILE: ${{ 'app/Dockerfile' }}
        run: |
          IMAGE_TAG=latest
          COMMIT_TAG=${COMMIT_SHA:0:7}
          BRANCH_TAG=${BRANCH_NAME}-${COMMIT_TAG}
          
          docker build --file $FILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition weather-app-task --query taskDefinition > task-definition.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        env:
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: $CONTAINER_NAME
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
      
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: weather-app-service
          cluster: weather-ecs-cluster
          wait-for-service-stability: true