name: Build and Push Docker Image to ECR

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - main

jobs:
  build-and-test-develop:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials from secrets
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          COMMIT_SHA: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
          FILE: ${{ 'app/Dockerfile' }}
        run: |
          IMAGE_TAG=latest
          COMMIT_TAG=${COMMIT_SHA:0:7}
          BRANCH_TAG=${BRANCH_NAME}-${COMMIT_TAG}
          
          docker build --file $FILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Run Docker container
        run: |
          IMAGE_TAG=latest
          docker run -d -p 80:80 ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Test Docker container
        run: |
          sleep 3
          RESPONSE=$(curl -v -X POST -H "Content-Type: application/x-www-form-urlencoded" -H "Accept: application/json" -d "city=Blabla" http://localhost -o response.json -w "%{http_code}")
          if [ "$RESPONSE" -eq 000 ]; then
            echo "Error: Failed to connect to the server"
            exit 1
          fi
          CONTENT=$(cat response.json)
          if [ "$RESPONSE" -eq 200 ]; then
            if echo "$CONTENT" | grep -q '"error"'; then
              echo "Error: Weather data not found."
              exit 1
            else
              echo "Success: Valid weather data received."
            fi
          else
            echo "Request failed with status code: $RESPONSE"
            exit 1
          fi

      - name: Push Docker image to ECR
        if: success()
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          COMMIT_SHA: ${{ github.sha }}
          BRANCH_NAME: ${{ github.ref_name }}
          FILE: ${{ 'app/Dockerfile' }}
        run: |
          IMAGE_TAG=latest
          COMMIT_TAG=${COMMIT_SHA:0:7}
          BRANCH_TAG=${BRANCH_NAME}-${COMMIT_TAG}
          
          docker build --file $FILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG

  build-and-deploy-main:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials from secrets
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build, tag, and push image to ECR
        env:
            ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
            ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
            COMMIT_SHA: ${{ github.sha }}
            BRANCH_NAME: ${{ github.ref_name }}
            FILE: ${{ 'app/Dockerfile' }}
        run: |
            IMAGE_TAG=latest
            COMMIT_TAG=${COMMIT_SHA:0:7}
            BRANCH_TAG=${BRANCH_NAME}-${COMMIT_TAG}
            
            docker build --file $FILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG
            echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG" >> $GITHUB_ENV

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition weather-app-task --query taskDefinition > task-definition.json

      - name: Display original task definition
        run: cat task-definition.json

      - name: Fill the new image ID in the Amazon ECS task definition
        env:
          CONTAINER_NAME: "weather-app"
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE }}

      - name: Display original task definition
        run: cat task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: weather-app-service
          cluster: weather-ecs-cluster
          wait-for-service-stability: true